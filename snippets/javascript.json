{
	"liff-import": {
		"prefix": [
			"liff-import",
			"import-liff"
		],
		"body": [
			"import liff from '@line/liff';",
			"$0"
		],
		"description": "Import @line/liff module"
	},
	"liff.init()": {
		"prefix": "liff-init",
		"body": [
			"liff",
			"  .init({",
			"    liffId: \"${1}\",",
			"  })",
			"  .then(() => {",
			"    // Start to use liff's api",
			"    ${2}",
			"  })",
			"  .catch((err) => {",
			"    // Error happens during initialization",
			"    ${3:console.error(err.code, err.message);}",
			"  });",
			""
		],
		"description": "Initializes a LIFF app."
	},
	"liff.isInClient()": {
		"prefix": "liff-isInClient",
		"body": [
			"if (liff.isInClient()) {",
			"  // LIFF app is running in a LIFF browser",
			"  $0",
			"}"
		],
		"description": "Determines whether the LIFF app is running in a LIFF browser."
	},
	"liff.isApiAvailable()": {
		"prefix": "liff-isApiAvailable",
		"body": [
			"// Check if specific API is available",
			"// https://developers.line.biz/en/reference/liff/#is-api-available",
			"if (liff.isApiAvailable('${1|shareTargetPicker,multipleLiffTransition|}')) {",
			"  $0",
			"}"
		],
		"description": "Checks whether the specified API is available in the environment where you started the LIFF app."
	},
	"liff.isApiAvailable('shareTargetPicker')": {
		"prefix": "liff-isApiAvailable-shareTargetPicker",
		"body": [
			"// Check if shareTargetPicker is available",
			"if (liff.isApiAvailable('shareTargetPicker')) {",
			"  liff.shareTargetPicker([",
			"    {",
			"      type: \"text\",",
			"      text: \"Hello, World!\"",
			"    }",
			"  ])",
			"    .then(",
			"      console.log(\"ShareTargetPicker was launched\")",
			"    ).catch(function(res) {",
			"      console.log(\"Failed to launch ShareTargetPicker\")",
			"    })",
			"}"
		],
		"description": "liff.isApiAvailable('shareTargetPicker')"
	},
	"liff.isApiAvailable('multipleLiffTransition')": {
		"prefix": "liff-isApiAvailable-multipleLiffTransition",
		"body": [
			"// Check if multiple liff transtion feature is available",
			"if (liff.isApiAvailable('multipleLiffTransition')) {",
			"  window.location.href = \"https://line.me/{liffId}\", // URL for another LIFF app",
			"}"
		],
		"description": "liff.isApiAvailable('multipleLiffTransition')"
	},
	"liff.ready": {
		"prefix": "liff-ready",
		"body": [
			"liff.ready.then(() => {",
			"  // do something you want when liff.init finishes",
			"  $0",
			"});"
		],
		"description": "A property holding the Promise object that resolves when you run liff.init() for the first time after starting the LIFF app."
	},
	"liff.permission.query()": {
		"prefix": "liff-permission-query",
		"body": [
			"liff.permission.query(\"${1|profile,chat_message.write,openid,email|}\").then((permissionStatus) => {",
			"    switch (permissionStatus.status) {",
			"      case 'granted':",
			"        // User has consented to the authorization",
			"        $0",
			"        break;",
			"      case 'prompt':",
			"        // User hasn't consented to authorization",
			"",
			"        // https://developers.line.biz/en/reference/liff/#permission-request-all",
			"        // liff.permission.requestAll() only operates on LINE MINI Apps.",
			"",
			"        break;",
			"      case 'unavailable':",
			"        // Not available because the channel does not have the specified scope",
			"        break;",
			"      default:",
			"        throw new Error('Unexpected permission status');",
			"    }",
			"  });"
		],
		"description": "Verifies whether the user agrees to grant the specified permission."
	},
	"liff.getProfile()": {
		"prefix": "liff-getProfile",
		"body": [
			"liff",
			"  .getProfile()",
			"  .then((profile) => {",
			"    const userId = profile.userId;",
			"    const displayName = profile.displayName;",
			"    const pictureUrl = profile.pictureUrl;",
			"    const statusMessage = profile.statusMessage;",
			"    $0",
			"  })",
			"  .catch((err) => {",
			"    console.log(\"error\", err);",
			"  });"
		],
		"description": "Gets the current user's profile information."
	},
	"liff.getFriendship()": {
		"prefix": "liff-getFriendship",
		"body": [
			"liff.getFriendship().then((data) => {",
			"  if (data.friendFlag) {",
			"    // You already have friendship with LINE Official Account",
			"    $0",
			"  }",
			"});"
		],
		"description": "Gets the friendship status between a user and a LINE Official Account."
	},
	"liff.openWindow()": {
		"prefix": "liff-openWindow",
		"body": [
			"liff.openWindow({",
			"  url: '${1:https://example.com}',",
			"  external: '${2|false,true|}'",
			"});"
		],
		"description": "Opens the specified URL in the LINE's in-app browser or external browser."
	},
	"liff.closeWindow()": {
		"prefix": "liff-closeWindow",
		"body": "liff.closeWindow();",
		"description": "Closes the LIFF app."
	},
	"liff.sendMessages(TEXT)": {
		"prefix": "liff-sendMessages",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      type: \"text\",",
			"      text: \"${1:Hello, World!}\",",
			"    },",
			"  ])",
			"  .then(() => {",
			"    ${2:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${3:console.log(\"error\", err);}",
			"  });"
		],
		"description": "Sends TEXT messages on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(IMAGE)": {
		"prefix": "liff-sendMessages-image",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      type: \"image\",",
			"      originalContentUrl: '$1',",
			"      previewImageUrl: '$2'",
			"    },",
			"  ])",
			"  .then(() => {",
			"    ${2:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${3:console.log(\"error\", err);}",
			"  });"
		],
		"description": "Sends IMAGE messages on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(LOCATION)": {
		"prefix": "liff-sendMessages-location",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      type: \"location\",",
			"      title: '$1',",
			"      address: '$2',",
			"      latitude: ${3:25.0339639},",
			"      longitude: ${4:121.5622835}",
			"    },",
			"  ])",
			"  .then(() => {",
			"    ${2:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${3:console.log(\"error\", err);}",
			"  });"
		],
		"description": "Sends LOCATION messages on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(STICKER)": {
		"prefix": "liff-sendMessages-sticker",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      type: \"sticker\",",
			"      // List of available stickers",
			"      // https://developers.line.biz/en/docs/messaging-api/sticker-list/",
			"      packageId: '$1',",
			"      stickerId: '$2'",
			"    },",
			"  ])",
			"  .then(() => {",
			"    ${2:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${3:console.log(\"error\", err);}",
			"  });"
		],
		"description": "Sends STICKER messages on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(VIDEO)": {
		"prefix": "liff-sendMessages-video",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      type: \"video\",",
			"      // HTTPS over TLS 1.2 or later, mp4, Max file size: 200 MB",
			"      originalContentUrl: '$1',",
			"      // HTTPS over TLS 1.2 or later, JPEG or PNG, Max file size: 1 MB",
			"      previewImageUrl: '$2'",
			"    },",
			"  ])",
			"  .then(() => {",
			"    ${2:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${3:console.log(\"error\", err);}",
			"  });"
		],
		"description": "Sends VIDEO messages on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(AUDIO)": {
		"prefix": "liff-sendMessages-audio",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      type: \"audio\",",
			"      // HTTPS over TLS 1.2 or later, m4a, Max file size: 200 MB",
			"      originalContentUrl: '$1',",
			"      // Length of audio file (milliseconds)",
			"      duration: ${2:3000}",
			"    },",
			"  ])",
			"  .then(() => {",
			"    ${2:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${3:console.log(\"error\", err);}",
			"  });"
		],
		"description": "Sends AUDIO messages on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(FLEX)": {
		"prefix": "liff-sendMessages-flex",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      type: \"flex\",",
			"      // Max character limit: 400",
			"      altText: '$1',",
			"      // Flex Message container",
			"      // https://developers.line.biz/en/reference/messaging-api/#container",
			"      contents: ${2}",
			"    },",
			"  ])",
			"  .then(() => {",
			"    ${2:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${3:console.log(\"error\", err);}",
			"  });"
		],
		"description": "Sends Flex Messages on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(TEMPLATE-Buttons)": {
		"prefix": "liff-sendMessages-Template-Buttons",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      \"type\": \"template\",",
			"      \"altText\": \"$1\",",
			"      \"template\": {",
			"        \"type\": \"buttons\",",
			"        \"thumbnailImageUrl\": \"${2:https://example.com/bot/images/image.jpg}\",",
			"        // rectangle: 1.51:1",
			"        // square: 1:1",
			"        \"imageAspectRatio\": \"${3|rectangle,square|}\",",
			"        // cover: The image fills the entire image area. Parts of the image that do not fit in the area are not displayed.",
			"        // contain: The entire image is displayed in the image area. A background is displayed in the unused areas to the left and right of vertical images and in the areas above and below horizontal images.",
			"        \"imageSize\": \"${4|cover,contain|}\",",
			"        \"imageBackgroundColor\": \"${5:#FFFFFF}\",",
			"        // Max character limit: 40",
			"        \"title\": \"${6:Menu}\",",
			"        // Max character limit: 160 (no image or title)",
			"        // Max character limit: 60 (message with an image or title)",
			"        \"text\": \"${7:Please select}\",",
			"        // Action objects https://developers.line.biz/en/reference/messaging-api/#action-objects",
			"        \"defaultAction\": {",
			"          \"type\": \"uri\",",
			"          \"label\": \"${8:View detail}\",",
			"          \"uri\": \"${9:http://example.com/page/123}\"",
			"        },",
			"        // Action when tapped, Max objects: 4",
			"        \"actions\": [",
			"          $0// {",
			"          //   \"type\": \"postback\",",
			"          //   \"label\": \"Buy\",",
			"          //   \"data\": \"action=buy&itemid=123\"",
			"          // },",
			"          // {",
			"          //   \"type\": \"postback\",",
			"          //   \"label\": \"Add to cart\",",
			"          //   \"data\": \"action=add&itemid=123\"",
			"          // },",
			"          // {",
			"          //   \"type\": \"uri\",",
			"          //   \"label\": \"View detail\",",
			"          //   \"uri\": \"http://example.com/page/123\"",
			"          // }",
			"        ]",
			"      }",
			"    }",
			"  ])",
			"  .then(() => {",
			"    ${10:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${11:console.log(\"error\", err);}",
			"  });"
		],
		"description": "Sends Template Messages (Buttons) on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(TEMPLATE-Confirm)": {
		"prefix": "liff-sendMessages-Template-Confirm",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      \"type\": \"template\",",
			"      \"altText\": \"${1:this is a confirm template}\",",
			"      \"template\": {",
			"        \"type\": \"confirm\",",
			"        \"text\": \"${2:Are you sure?}\",",
			"        \"actions\": [",
			"          {",
			"            \"type\": \"message\",",
			"            \"label\": \"${3:Yes}\",",
			"            \"text\": \"${4:yes}\"",
			"          },",
			"          {",
			"            \"type\": \"message\",",
			"            \"label\": \"${5:No}\",",
			"            \"text\": \"${6:no}\"",
			"          }",
			"        ]",
			"      }",
			"    }",
			"  ])",
			"  .then(() => {",
			"    ${7:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${8:console.log(\"error\", err);}",
			"  });",
			"$0"
		],
		"description": "Sends Template Messages (Confirm) on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(TEMPLATE-Carousel)": {
		"prefix": "liff-sendMessages-Template-Carousel",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      \"type\": \"template\",",
			"      \"altText\": \"${1:this is a carousel template}\",",
			"      \"template\": {",
			"        \"type\": \"carousel\",",
			"        \"columns\": [",
			"          $0{",
			"            \"thumbnailImageUrl\": \"https://example.com/bot/images/item1.jpg\",",
			"            \"imageBackgroundColor\": \"#FFFFFF\",",
			"            \"title\": \"this is menu\",",
			"            \"text\": \"description\",",
			"            \"defaultAction\": {",
			"              \"type\": \"uri\",",
			"              \"label\": \"View detail\",",
			"              \"uri\": \"http://example.com/page/123\"",
			"            },",
			"            \"actions\": [",
			"              {",
			"                \"type\": \"postback\",",
			"                \"label\": \"Buy\",",
			"                \"data\": \"action=buy&itemid=111\"",
			"              },",
			"              {",
			"                \"type\": \"postback\",",
			"                \"label\": \"Add to cart\",",
			"                \"data\": \"action=add&itemid=111\"",
			"              },",
			"              {",
			"                \"type\": \"uri\",",
			"                \"label\": \"View detail\",",
			"                \"uri\": \"http://example.com/page/111\"",
			"              }",
			"            ]",
			"          },",
			"          {",
			"            \"thumbnailImageUrl\": \"https://example.com/bot/images/item2.jpg\",",
			"            \"imageBackgroundColor\": \"#000000\",",
			"            \"title\": \"this is menu\",",
			"            \"text\": \"description\",",
			"            \"defaultAction\": {",
			"              \"type\": \"uri\",",
			"              \"label\": \"View detail\",",
			"              \"uri\": \"http://example.com/page/222\"",
			"            },",
			"            \"actions\": [",
			"              {",
			"                \"type\": \"postback\",",
			"                \"label\": \"Buy\",",
			"                \"data\": \"action=buy&itemid=222\"",
			"              },",
			"              {",
			"                \"type\": \"postback\",",
			"                \"label\": \"Add to cart\",",
			"                \"data\": \"action=add&itemid=222\"",
			"              },",
			"              {",
			"                \"type\": \"uri\",",
			"                \"label\": \"View detail\",",
			"                \"uri\": \"http://example.com/page/222\"",
			"              }",
			"            ]",
			"          }",
			"        ],",
			"        // rectangle: 1.51:1",
			"        // square: 1:1",
			"        \"imageAspectRatio\": \"${2|rectangle,square|}\",",
			"        // cover: The image fills the entire image area. Parts of the image that do not fit in the area are not displayed.",
			"        // contain: The entire image is displayed in the image area. A background is displayed in the unused areas to the left and right of vertical images and in the areas above and below horizontal images.",
			"        \"imageSize\": \"${3|cover,contain|}\",",
			"      }",
			"    }",
			"  ])",
			"  .then(() => {",
			"    ${4:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${5:console.log(\"error\", err);}",
			"  });",
			"$0"
		],
		"description": "Sends Template Messages (Carousel) on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.sendMessages(TEMPLATE-ImageCarousel)": {
		"prefix": "liff-sendMessages-Template-ImageCarousel",
		"body": [
			"liff",
			"  .sendMessages([",
			"    {",
			"      \"type\": \"template\",",
			"      \"altText\": \"${1:this is a image carousel template}\",",
			"      \"template\": {",
			"        \"type\": \"image_carousel\",",
			"        \"columns\": [",
			"          $0{",
			"            \"imageUrl\": \"https://example.com/bot/images/item1.jpg\",",
			"            \"action\": {",
			"              \"type\": \"postback\",",
			"              \"label\": \"Buy\",",
			"              \"data\": \"action=buy&itemid=111\"",
			"            }",
			"          },",
			"          {",
			"            \"imageUrl\": \"https://example.com/bot/images/item2.jpg\",",
			"            \"action\": {",
			"              \"type\": \"message\",",
			"              \"label\": \"Yes\",",
			"              \"text\": \"yes\"",
			"            }",
			"          },",
			"          {",
			"            \"imageUrl\": \"https://example.com/bot/images/item3.jpg\",",
			"            \"action\": {",
			"              \"type\": \"uri\",",
			"              \"label\": \"View detail\",",
			"              \"uri\": \"http://example.com/page/222\"",
			"            }",
			"          }",
			"        ]",
			"      }",
			"    }",
			"  ])",
			"  .then(() => {",
			"    ${2:console.log(\"message sent\");}",
			"  })",
			"  .catch((err) => {",
			"    ${3:console.log(\"error\", err);}",
			"  });",
			"$0"
		],
		"description": "Sends Template Messages (Image Carousel) on behalf of the user to the chat screen where the LIFF app is opened. This feature is only available in a LIFF app launched from a one-on-one chat room."
	},
	"liff.shareTargetPicker()": {
		"prefix": "liff-shareTargetPicker",
		"body": [
			"liff",
			"  .shareTargetPicker(",
			"    [",
			"      {",
			"        type: \"text\",",
			"        text: \"${1:Hello, World!}\",",
			"      },$0",
			"    ],",
			"    {",
			"      isMultiple: ${2|true,false|},",
			"    }",
			"  )",
			"  .then(function (res) {",
			"    if (res) {",
			"      // succeeded in sending a message through TargetPicker",
			"      console.log(`[${res.status}] Message sent!`);",
			"    } else {",
			"      // sending message canceled",
			"      console.log(\"TargetPicker was closed!\");",
			"    }",
			"  })",
			"  .catch(function (error) {",
			"    // something went wrong before sending a message",
			"    console.log(\"something wrong happen\");",
			"  });"
		],
		"description": "Displays the target picker (screen for selecting a group or friend) and sends the message created by the developer to the selected target. This message appears to your group or friends as if you had sent it."
	},
	"liff.scanCodeV2()": {
		"prefix": "liff-scanCodeV2",
		"body": [
			"liff",
			"  .scanCodeV2()",
			"  .then((result) => {",
			"    const text = result.value;",
			"    $0",
			"  })",
			"  .catch((error) => {",
			"    console.log(\"error\", error);",
			"  });"
		],
		"description": "Launch the 2D code reader and obtain string. To activate the 2D code reader, turn on Scan QR on the LINE Developers Console."
	},
	"liff.permanentLink.createUrlBy()": {
		"prefix": "liff-permanentLink-createUrlBy",
		"body": [
			"liff.permanentLink",
			"  .createUrlBy(\"${1:https://example.com/path1?q1=v1}\")",
			"  .then((permanentLink) => {",
			"    ${2:console.log(permanentLink);}",
			"  });"
		],
		"description": "Get the permanent link of any page in the LIFF app."
	}
}